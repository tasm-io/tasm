/* eslint-disable no-unused-vars */

// Operand represnts an operand to an instruction.
export enum Operand {
  Memory,
  Register,
  Integer,
}

// Opcode represents the opcode for an instruction.
export enum Opcode {
  Nop = 0,
  MovRegReg = 1,
  MovRegMem = 2,
  MovRegInt = 3,
  MovMemReg = 4,
  MovMemInt = 5,
  AddRegReg = 6,
  AddRegInt = 7,
  SubRegReg = 8,
  SubRegInt = 9,
  MulRegReg = 10,
  MulRegInt = 11,
  DivRegReg = 12,
  DivRegInt = 13,
  AndRegReg = 14,
  AndRegInt = 15,
  OrRegReg = 16,
  OrRegInt = 17,
  XorRegReg = 18,
  XorRegInt = 19,
  CmpRegReg = 20,
  CmpRegInt = 21,
  Not = 22,
  Push = 23,
  Pop = 24,
  In = 25,
  Out = 26,
  Call = 27,
  Jmp = 28,
  JmpS = 29,
  JmpNS = 30,
  JmpZ = 31,
  JmpNZ = 32,
  Ret = 33,
  Cli = 34,
  Sti = 35,
}

export const OpcodeMapping: { [key: string]: Opcode[] } = {
  nop: [Opcode.Nop],
  mov: [
    Opcode.MovRegReg,
    Opcode.MovRegMem,
    Opcode.MovRegInt,
    Opcode.MovMemReg,
    Opcode.MovMemInt,
  ],
  add: [Opcode.AddRegReg, Opcode.AddRegInt],
  sub: [Opcode.SubRegReg, Opcode.SubRegInt],
  mul: [Opcode.MulRegReg, Opcode.MulRegInt],
  div: [Opcode.DivRegReg, Opcode.DivRegInt],
  and: [Opcode.AndRegReg, Opcode.AndRegInt],
  or: [Opcode.OrRegReg, Opcode.OrRegInt],
  xor: [Opcode.XorRegReg, Opcode.XorRegInt],
  cmp: [Opcode.CmpRegReg, Opcode.CmpRegInt],
  not: [Opcode.Not],
  push: [Opcode.Push],
  pop: [Opcode.Pop],
  in: [Opcode.In],
  out: [Opcode.Out],
  call: [Opcode.Call],
  jmp: [Opcode.Jmp],
  js: [Opcode.JmpS],
  jns: [Opcode.JmpNS],
  jz: [Opcode.JmpZ],
  jnz: [Opcode.JmpNZ],
  ret: [Opcode.Ret],
  cli: [Opcode.Cli],
  sti: [Opcode.Sti],
};

// OperandTypes maps each opcode to its operand's types.
export const OperandTypes = {
  [Opcode.Nop]: [],
  [Opcode.MovRegReg]: [Operand.Register, Operand.Register],
  [Opcode.MovRegMem]: [Operand.Register, Operand.Memory],
  [Opcode.MovRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.MovMemReg]: [Operand.Memory, Operand.Register],
  [Opcode.MovMemInt]: [Operand.Memory, Operand.Integer],
  [Opcode.AddRegReg]: [Operand.Register, Operand.Register],
  [Opcode.AddRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.SubRegReg]: [Operand.Register, Operand.Register],
  [Opcode.SubRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.MulRegReg]: [Operand.Register, Operand.Register],
  [Opcode.MulRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.DivRegReg]: [Operand.Register, Operand.Register],
  [Opcode.DivRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.AndRegReg]: [Operand.Register, Operand.Register],
  [Opcode.AndRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.OrRegReg]: [Operand.Register, Operand.Register],
  [Opcode.OrRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.XorRegReg]: [Operand.Register, Operand.Register],
  [Opcode.XorRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.CmpRegReg]: [Operand.Register, Operand.Register],
  [Opcode.CmpRegInt]: [Operand.Register, Operand.Integer],
  [Opcode.Not]: [Operand.Register],
  [Opcode.Push]: [Operand.Register],
  [Opcode.Pop]: [Operand.Register],
  [Opcode.In]: [Operand.Integer],
  [Opcode.Out]: [Operand.Integer],
  [Opcode.Call]: [Operand.Integer],
  [Opcode.Jmp]: [Operand.Integer],
  [Opcode.JmpS]: [Operand.Integer],
  [Opcode.JmpNS]: [Operand.Integer],
  [Opcode.JmpZ]: [Operand.Integer],
  [Opcode.JmpNZ]: [Operand.Integer],
  [Opcode.Ret]: [],
  [Opcode.Cli]: [],
  [Opcode.Sti]: [],
};

// Register represents a register operand type.
export enum Register {
  AL = 0,
  BL = 1,
  CL = 2,
  DL = 3,
  SP = 4,
  SR = 5,
  IP = 6,
}
